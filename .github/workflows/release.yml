name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build-and-package:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,x86_64-unknown-linux-musl,aarch64-unknown-linux-gnu

      - name: Install Zig
        uses: mlugg/setup-zig@v2

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild


      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          export RUSTFLAGS="-C target-feature=+crt-static" 
          cargo zigbuild --release --target ${{ matrix.target }}

      - name: Create tar.gz archive
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf clifx-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz clifx
          mv clifx-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ../../../

      - name: Create .deb package (x86_64 only)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          export RUSTFLAGS="-C target-feature=+crt-static" 
          cargo deb --target ${{ matrix.target }} --no-build
          mv target/${{ matrix.target }}/debian/*.deb clifx-${{ needs.create-release.outputs.version }}-amd64.deb

      - name: Upload tar.gz Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: clifx-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz

      - name: Upload .deb Release Asset
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: clifx-${{ needs.create-release.outputs.version }}-amd64.deb

  update-package-metadata:
    needs: [create-release, build-and-package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update release with checksums
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} completed successfully!" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Binary Archives (.tar.gz)" >> release_notes.md
          echo "- **Linux x86_64 (glibc)**: \`clifx-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz\`" >> release_notes.md
          echo "- **Linux x86_64 (musl/static)**: \`clifx-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz\`" >> release_notes.md
          echo "- **Linux ARM64**: \`clifx-${{ needs.create-release.outputs.version }}-aarch64-unknown-linux-gnu.tar.gz\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Debian Package (.deb)" >> release_notes.md
          echo "- **Ubuntu/Debian x86_64**: \`clifx-${{ needs.create-release.outputs.version }}-amd64.deb\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### From .tar.gz" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "wget https://github.com/durableprogramming/clifx/releases/download/${{ needs.create-release.outputs.version }}/clifx-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz" >> release_notes.md
          echo "tar -xzf clifx-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz" >> release_notes.md
          echo "sudo mv clifx /usr/local/bin/" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### From .deb (Ubuntu/Debian)" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "wget https://github.com/durableprogramming/clifx/releases/download/${{ needs.create-release.outputs.version }}/clifx-${{ needs.create-release.outputs.version }}-amd64.deb" >> release_notes.md
          echo "sudo dpkg -i clifx-${{ needs.create-release.outputs.version }}-amd64.deb" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Update Release Description
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const release = releases.data.find(r => r.tag_name === '${{ needs.create-release.outputs.version }}');
            
            if (release) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: releaseNotes
              });
            }
